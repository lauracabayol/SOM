{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "import SOM\n",
    "import numpy as np\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "#mu = np.random.choice(np.arange(0,20,1),10000)\n",
    "mu = np.random.uniform(0,20,10000)\n",
    "b = np.random.uniform(0,2, size = 10000)\n",
    "x = np.arange(0,5,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_sample = mu[:,None] * x[None,:] +b[:,None]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DEFINE SOM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx, ny = 10,10\n",
    "epochs = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "selforgmap = SOM.SOM(x = nx, y = ny, epochs = epochs, vec_size = 5, metric = 'Euclidean',lr0 = 0.01, sigma0 = 5, initialisation = 'RandomNormal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "selforgmap.train(training_sample, samples_epoch = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TEST SAMPLE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "bmu = selforgmap.test_obj(training_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(np.c_[mu, bmu], columns = ['mu','cell'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "som_vis = df.groupby('cell').mu.median().reset_index().rename(columns = {'mu':'mu_som'})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_cells = np.arange(0,nx)\n",
    "y_cells = np.arange(0,ny)\n",
    "index_cell = np.arange(nx*ny)\n",
    "cells = np.array(np.meshgrid(x_cells,y_cells)).T.reshape(-1,2)\n",
    "cells = pd.DataFrame(np.c_[cells[:,0],cells[:,1],index_cell], columns = ['x_cell','y_cell','cell'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "som_data = som_vis.merge(cells, on = 'cell')\n",
    "som_data = som_data.pivot(index = 'x_cell', columns = 'y_cell', values = 'mu_som')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1300e9240>"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(som_data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
